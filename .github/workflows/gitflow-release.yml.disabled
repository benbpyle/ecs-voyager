name: GitFlow Release Pipeline

# This workflow is DISABLED (note the .disabled extension)
# To enable: rename to gitflow-release.yml
#
# GitFlow Release Process:
# 1. Create release branch from develop: git flow release start v0.2.0
# 2. Make any final changes/version bumps
# 3. Push branch: git push origin release/v0.2.0
# 4. This workflow will trigger and:
#    - Run all tests
#    - Build multi-platform binaries
#    - Create GitHub release
#    - Update Homebrew formula
#    - Merge to main and back to develop

on:
  push:
    branches:
      - 'release/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.2.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Job 1: Extract version and validate
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      version_tag: ${{ steps.extract_version.outputs.version_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from branch or input
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            # Extract from branch name: release/v0.2.0 -> v0.2.0
            VERSION="${GITHUB_REF#refs/heads/release/}"
          fi

          # Remove 'v' prefix for cargo version
          CARGO_VERSION="${VERSION#v}"

          echo "version=$CARGO_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION" >> $GITHUB_OUTPUT

          echo "Release Version: $VERSION"
          echo "Cargo Version: $CARGO_VERSION"

      - name: Update Cargo.toml version
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml

      - name: Commit version bump
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add Cargo.toml
          git commit -m "chore: bump version to ${{ steps.extract_version.outputs.version_tag }}" || echo "No changes to commit"
          git push

  # Job 2: Run comprehensive tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features --verbose

      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Security audit
        run: |
          cargo install cargo-audit
          cargo audit

  # Job 3: Build multi-platform binaries
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ecs-voyager
            asset_name: ecs-voyager-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ecs-voyager
            asset_name: ecs-voyager-aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ecs-voyager
            asset_name: ecs-voyager-x86_64-linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: ecs-voyager
            asset_name: ecs-voyager-aarch64-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ecs-voyager.exe
            asset_name: ecs-voyager-x86_64-windows.exe

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          cd -

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path target/${{ matrix.target }}/release/${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}.zip

      - name: Calculate checksum (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

      - name: Calculate checksum (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $hash = (Get-FileHash ${{ matrix.asset_name }}.zip -Algorithm SHA256).Hash.ToLower()
          "$hash  ${{ matrix.asset_name }}.zip" | Out-File -Encoding ASCII ${{ matrix.asset_name }}.zip.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.*

  # Job 4: Create GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: ls -R artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version_tag }}
          name: Release ${{ needs.prepare.outputs.version_tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 5: Update Homebrew Formula
  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [prepare, release]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Download checksums
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract SHA256 checksums
        id: checksums
        run: |
          X86_SHA=$(cat artifacts/ecs-voyager-x86_64-apple-darwin/*.sha256 | awk '{print $1}')
          ARM_SHA=$(cat artifacts/ecs-voyager-aarch64-apple-darwin/*.sha256 | awk '{print $1}')

          echo "x86_sha=$X86_SHA" >> $GITHUB_OUTPUT
          echo "arm_sha=$ARM_SHA" >> $GITHUB_OUTPUT

      - name: Update formula
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          VERSION_TAG="${{ needs.prepare.outputs.version_tag }}"
          X86_SHA="${{ steps.checksums.outputs.x86_sha }}"
          ARM_SHA="${{ steps.checksums.outputs.arm_sha }}"

          sed -i "s/version \".*\"/version \"$VERSION\"/" Formula/ecs-voyager.rb
          sed -i "s|download/v[^/]*/|download/$VERSION_TAG/|g" Formula/ecs-voyager.rb
          sed -i "s/PLACEHOLDER_X86_64_SHA256/$X86_SHA/" Formula/ecs-voyager.rb
          sed -i "s/PLACEHOLDER_ARM64_SHA256/$ARM_SHA/" Formula/ecs-voyager.rb

      - name: Commit formula update
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add Formula/ecs-voyager.rb
          git commit -m "chore: update Homebrew formula to ${{ needs.prepare.outputs.version_tag }}" || echo "No changes to commit"
          git push

  # Job 6: Complete GitFlow (merge to main and develop)
  gitflow-complete:
    name: Complete GitFlow
    runs-on: ubuntu-latest
    needs: [prepare, update-homebrew]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Merge to main
        run: |
          git checkout main
          git merge --no-ff ${{ github.ref }} -m "Merge release ${{ needs.prepare.outputs.version_tag }} to main"
          git push origin main

      - name: Tag release on main
        run: |
          git tag -a ${{ needs.prepare.outputs.version_tag }} -m "Release ${{ needs.prepare.outputs.version_tag }}"
          git push origin ${{ needs.prepare.outputs.version_tag }}

      - name: Merge back to develop
        run: |
          git checkout develop
          git merge --no-ff main -m "Merge main back to develop after ${{ needs.prepare.outputs.version_tag }}"
          git push origin develop

      - name: Delete release branch
        run: |
          git push origin --delete ${{ github.ref_name }}

  # Job 7: Notify on completion
  notify:
    name: Notify Release Complete
    runs-on: ubuntu-latest
    needs: [prepare, gitflow-complete]
    if: always()
    steps:
      - name: Release Success
        if: needs.gitflow-complete.result == 'success'
        run: |
          echo "✅ Release ${{ needs.prepare.outputs.version_tag }} completed successfully!"
          echo "- GitHub Release created"
          echo "- Homebrew formula updated"
          echo "- Merged to main and develop"
          echo ""
          echo "Users can now install with:"
          echo "  brew tap benbpyle/ecs-voyager"
          echo "  brew install ecs-voyager"

      - name: Release Failed
        if: needs.gitflow-complete.result == 'failure'
        run: |
          echo "❌ Release ${{ needs.prepare.outputs.version_tag }} failed!"
          echo "Please check the workflow logs for details."
          exit 1
