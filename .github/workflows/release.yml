name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - master
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  create-tag:
    name: Create Release Tag
    runs-on: ubuntu-latest
    # Only run if CI succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      should_release: ${{ steps.check_skip.outputs.skip == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if should skip
        id: check_skip
        run: |
          # Skip if commit message is a formula update
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          if [[ "$COMMIT_MSG" == "chore: update Homebrew formula"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping release - formula update commit"
            exit 0
          fi

          # Skip if tag already exists
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.version.outputs.version }} already exists, skipping release"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.version.outputs.version }} does not exist, will create release"
          fi

      - name: Create and push tag
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

  build-and-release:
    name: Build and Release
    needs: create-tag
    if: needs.create-tag.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ecs-voyager
            asset_name: ecs-voyager-${{ needs.create-tag.outputs.tag }}-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ecs-voyager
            asset_name: ecs-voyager-${{ needs.create-tag.outputs.tag }}-aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.tag }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (reduce size)
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

      - name: Upload release archive
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
          files: |
            target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz
            target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew-formula:
    name: Update Homebrew Formula
    needs: [create-tag, build-and-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: benbpyle/homebrew-ecs-voyager
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Download release artifacts
        run: |
          VERSION="${{ needs.create-tag.outputs.tag }}"

          # Download both macOS archives
          curl -sL "https://github.com/benbpyle/ecs-voyager/releases/download/${VERSION}/ecs-voyager-${VERSION}-x86_64-apple-darwin.tar.gz" -o x86_64.tar.gz
          curl -sL "https://github.com/benbpyle/ecs-voyager/releases/download/${VERSION}/ecs-voyager-${VERSION}-aarch64-apple-darwin.tar.gz" -o aarch64.tar.gz

          # Calculate SHA256 checksums
          X86_64_SHA256=$(shasum -a 256 x86_64.tar.gz | awk '{print $1}')
          AARCH64_SHA256=$(shasum -a 256 aarch64.tar.gz | awk '{print $1}')

          echo "X86_64_SHA256=${X86_64_SHA256}" >> $GITHUB_ENV
          echo "AARCH64_SHA256=${AARCH64_SHA256}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Update formula
        run: |
          # Update version
          sed -i "s/version \".*\"/version \"${VERSION#v}\"/" Formula/ecs-voyager.rb

          # Update URLs - both the path and the filename
          sed -i "s|ecs-voyager-v[0-9]\+\.[0-9]\+\.[0-9]\+-aarch64-apple-darwin.tar.gz|ecs-voyager-${VERSION}-aarch64-apple-darwin.tar.gz|g" Formula/ecs-voyager.rb
          sed -i "s|ecs-voyager-v[0-9]\+\.[0-9]\+\.[0-9]\+-x86_64-apple-darwin.tar.gz|ecs-voyager-${VERSION}-x86_64-apple-darwin.tar.gz|g" Formula/ecs-voyager.rb

          # Update ARM64 SHA256 (find the sha256 line after aarch64-apple-darwin)
          sed -i "/aarch64-apple-darwin.tar.gz/,/sha256/ s/sha256 \".*\"/sha256 \"${AARCH64_SHA256}\"/" Formula/ecs-voyager.rb

          # Update x86_64 SHA256 (find the sha256 line after x86_64-apple-darwin)
          sed -i "/x86_64-apple-darwin.tar.gz/,/sha256/ s/sha256 \".*\"/sha256 \"${X86_64_SHA256}\"/" Formula/ecs-voyager.rb

      - name: Create PR with updated formula
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are changes
          if git diff --quiet Formula/ecs-voyager.rb; then
            echo "No changes to formula, skipping"
            exit 0
          fi

          # Create branch
          BRANCH_NAME="chore/update-formula-${VERSION}"
          git checkout -b "${BRANCH_NAME}"

          # Commit changes
          git add Formula/ecs-voyager.rb
          git commit -m "chore: update Homebrew formula to ${VERSION}" \
                     -m "Auto-updated by release workflow:" \
                     -m "- Version: ${VERSION#v}" \
                     -m "- ARM64 SHA256: ${AARCH64_SHA256}" \
                     -m "- x86_64 SHA256: ${X86_64_SHA256}"

          # Push branch
          git push origin "${BRANCH_NAME}"

          # Create PR
          gh pr create \
            --title "chore: update formula to ${VERSION}" \
            --body "Auto-generated PR to update formula" \
            --base main \
            --head "${BRANCH_NAME}"
